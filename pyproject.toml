[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "basecamp"
version = "0.1.0"
description = "AI-powered intake and CRM enrichment service for small businesses"
readme = "CLAUDE.md"
license = {text = "MIT"}
authors = [
    {name = "baseCamp Team"}
]
keywords = ["ai", "crm", "lead-generation", "ollama", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    # Core web framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # AI/ML dependencies
    "ollama>=0.1.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    
    # HTTP client and external APIs
    "httpx>=0.24.0",
    "pyairtable>=2.0.0",
    
    # Rate limiting and security
    "slowapi>=0.1.8",
    
    # Utilities
    "python-multipart>=0.0.6",  # For form data handling
    "python-dotenv>=1.0.0",     # For .env file support
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    
    # Code quality
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    
    # Development tools
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]
docker = [
    # Production dependencies for Docker
    "gunicorn>=21.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/basecamp"
Documentation = "https://github.com/your-org/basecamp/blob/main/CLAUDE.md"
Repository = "https://github.com/your-org/basecamp.git"
Issues = "https://github.com/your-org/basecamp/issues"

[project.scripts]
basecamp = "src.main:app"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ollama.*",
    "chromadb.*",
    "sentence_transformers.*",
    "pyairtable.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-v"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]